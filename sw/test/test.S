.globl _start
_start:         # @xmemstart
    # jump to real start
    j _begin    

_end:           # @xmemstart + 4 -> breakpoint

    # reset tmpregstore (get clean memhash)
    csrrw gp, mscratch, gp
    li    t0, 0
    li    t1, 0
    li    t2, 0
    sd x5, 0(gp)
    sd x6, 8(gp)
    sd x7, 16(gp)
    # save/update state
    ld x5, 24(gp)
    ld x6, 32(gp)
    ld x7, 40(gp)
    li   x9, 0x6600
    csrr x7, mstatus
    and  x7, x7, x9
    sd x5, 24(gp)
    sd x6, 32(gp)
    sd x7, 40(gp)
    # enable and save float state
    li   x5, 0x6000
    csrs mstatus, x5
    csrr x5, fcsr
    sd x5, 48(gp)
    # save float registers
    fsd f0, 64(gp)
    fsd f1, 72(gp)
    fsd f2, 80(gp)
    fsd f3, 88(gp)
    fsd f4, 96(gp)
    fsd f5, 104(gp)
    fsd f6, 112(gp)
    fsd f7, 120(gp)
    fsd f8, 128(gp)
    fsd f9, 136(gp)
    fsd f10, 144(gp)
    fsd f11, 152(gp)
    fsd f12, 160(gp)
    fsd f13, 168(gp)
    fsd f14, 176(gp)
    fsd f15, 184(gp)
    fsd f16, 192(gp)
    fsd f17, 200(gp)
    fsd f18, 208(gp)
    fsd f19, 216(gp)
    fsd f20, 224(gp)
    fsd f21, 232(gp)
    fsd f22, 240(gp)
    fsd f23, 248(gp)
    fsd f24, 256(gp)
    fsd f25, 264(gp)
    fsd f26, 272(gp)
    fsd f27, 280(gp)
    fsd f28, 288(gp)
    fsd f29, 296(gp)
    fsd f30, 304(gp)
    fsd f31, 312(gp)
    # enable and save vector state
    li   x5, 0x600
    csrs mstatus, x5
    csrr x5, vtype
    csrr x6, vl
    csrr x7, vlenb
    csrr x8, vstart
    csrr x9, vxrm
    csrr x10, vxsat
    csrr x11, vcsr
    sd x5, 320(gp)
    sd x6, 328(gp)
    sd x7, 336(gp)
    sd x8, 344(gp)
    sd x9, 352(gp)
    sd x10, 360(gp)
    sd x11, 368(gp)
    # save vector registers
    vsetvli t0, zero, e8, m1, ta, ma
    addi t0, gp, 376
    vs1r.v v0, (t0)
    addi t0, t0, 64
    vs1r.v v1, (t0)
    addi t0, t0, 64
    vs1r.v v2, (t0)
    addi t0, t0, 64
    vs1r.v v3, (t0)
    addi t0, t0, 64
    vs1r.v v4, (t0)
    addi t0, t0, 64
    vs1r.v v5, (t0)
    addi t0, t0, 64
    vs1r.v v6, (t0)
    addi t0, t0, 64
    vs1r.v v7, (t0)
    addi t0, t0, 64
    vs1r.v v8, (t0)
    addi t0, t0, 64
    vs1r.v v9, (t0)
    addi t0, t0, 64
    vs1r.v v10, (t0)
    addi t0, t0, 64
    vs1r.v v11, (t0)
    addi t0, t0, 64
    vs1r.v v12, (t0)
    addi t0, t0, 64
    vs1r.v v13, (t0)
    addi t0, t0, 64
    vs1r.v v14, (t0)
    addi t0, t0, 64
    vs1r.v v15, (t0)
    addi t0, t0, 64
    vs1r.v v16, (t0)
    addi t0, t0, 64
    vs1r.v v17, (t0)
    addi t0, t0, 64
    vs1r.v v18, (t0)
    addi t0, t0, 64
    vs1r.v v19, (t0)
    addi t0, t0, 64
    vs1r.v v20, (t0)
    addi t0, t0, 64
    vs1r.v v21, (t0)
    addi t0, t0, 64
    vs1r.v v22, (t0)
    addi t0, t0, 64
    vs1r.v v23, (t0)
    addi t0, t0, 64
    vs1r.v v24, (t0)
    addi t0, t0, 64
    vs1r.v v25, (t0)
    addi t0, t0, 64
    vs1r.v v26, (t0)
    addi t0, t0, 64
    vs1r.v v27, (t0)
    addi t0, t0, 64
    vs1r.v v28, (t0)
    addi t0, t0, 64
    vs1r.v v29, (t0)
    addi t0, t0, 64
    vs1r.v v30, (t0)
    addi t0, t0, 64
    vs1r.v v31, (t0)
    addi t0, t0, 64


    # restore gp
    csrrw gp, mscratch, gp
    
    # loop
    j _end      # jump to xmemstart + 4 (breakpoint)

_begin:
    li gp, 0x1f800
    csrw mscratch, gp

# Stop/Skip on exception
    # jump over exception handling code
    j _exc_end
    # exc vector
_exc_handler:
    # save context
    csrrw gp, mscratch, gp
    sd x5, 0(gp)
    sd x6, 8(gp)
    sd x7, 16(gp)
    # handle state (load all, modify, store all)
    ld x5, 24(gp)
    ld x6, 32(gp)
    ld x7, 40(gp)
    # save adress of last instruction (exception)
    csrr x5, mepc
    # increment exception counter
    addi x6, x6, 1
    sd x5, 24(gp)
    sd x6, 32(gp)
    sd x7, 40(gp)
    # skip on exception: modify mepc to next instruction (ra+4)
    addi x5, x5, 4
    csrw mepc, x5
    # restore context
    ld x5, 0(gp)
    ld x6, 8(gp)
    ld x7, 16(gp)
    csrrw gp, mscratch, gp

    # skip on exception: jump back to next instruction (ra+4)
    mret

_exc_end:
    # set vector to _vector (stop/skip on exc)
    la t0, _exc_handler
    csrw mtvec, t0
    # disable interrupt, timer, swint (exceptions only)
    # mie.MEIE=0, mie.MTIE=0, mie.MSIE=0
    li t0, 0x000
    csrw mie, t0
    # init state (exception counter, last exec pc)
    li x5, 0x0
    li x6, 0x0
    li x7, 0x0
    sd x5, 24(gp)
    sd x6, 32(gp)
    sd x7, 40(gp)
    # set mstatus (disabled ints, features)
    li t0, 0
    # Enable floating point
    li t1, 0x6000   // MSTATUS_FS
    or t0, t0, t1
    # Enable vector
    li t1, 0x600    // MSTATUS_VS
    or t0, t0, t1
    csrw mstatus, t0
// init fp registers
    fcvt.d.w f0, zero
    fcvt.d.w f1, zero
    fcvt.d.w f2, zero
    fcvt.d.w f3, zero
    fcvt.d.w f4, zero
    fcvt.d.w f5, zero
    fcvt.d.w f6, zero
    fcvt.d.w f7, zero
    fcvt.d.w f8, zero
    fcvt.d.w f9, zero
    fcvt.d.w f10, zero
    fcvt.d.w f11, zero
    fcvt.d.w f12, zero
    fcvt.d.w f13, zero
    fcvt.d.w f14, zero
    fcvt.d.w f15, zero
    fcvt.d.w f16, zero
    fcvt.d.w f17, zero
    fcvt.d.w f18, zero
    fcvt.d.w f19, zero
    fcvt.d.w f20, zero
    fcvt.d.w f21, zero
    fcvt.d.w f22, zero
    fcvt.d.w f23, zero
    fcvt.d.w f24, zero
    fcvt.d.w f25, zero
    fcvt.d.w f26, zero
    fcvt.d.w f27, zero
    fcvt.d.w f28, zero
    fcvt.d.w f29, zero
    fcvt.d.w f30, zero
    fcvt.d.w f31, zero

    # Vector: reset vl to max
    vsetvli t0, zero, e8, ta, ma
    li x1, 1
    li x2, 2
    li x3, 3
    li x4, 4
    li x5, 5
    li x6, 6
    li x7, 7
    li x8, 8
    li x9, 9
    li x10, 10
    li x11, 11
    li x12, 12
    li x13, 13
    li x14, 14
    li x15, 15
    li x16, 16
    li x17, 17
    li x18, 18
    li x19, 19
    li x20, 20
    li x21, 21
    li x22, 22
    li x23, 23
    li x24, 24
    li x25, 25
    li x26, 26
    li x27, 27
    li x28, 28
    li x29, 29
    li x30, 30
    li x31, 31

# start of test code

_label0:
    // FLOATINGPOINT STATE DATA
    j _float_data_end
    .align 4
_reg_f0: .byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_f1: .byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_f2: .byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_f3: .byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_f4: .byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_f5: .byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_f6: .byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_f7: .byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_f8: .byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_f9: .byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_f10:.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_f11:.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_f12:.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_f13:.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_f14:.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_f15:.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_f16:.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_f17:.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_f18:.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_f19:.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_f20:.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_f21:.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_f22:.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_f23:.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_f24:.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_f25:.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_f26:.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_f27:.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_f28:.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_f29:.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_f30:.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_f31:.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_float_data_end:
    // FLOATINTPOINT STATE
    la t0, _reg_f0
    fld  f0, 0(t0)
    la t0, _reg_f1
    fld  f1, 0(t0)
    la t0, _reg_f2
    fld  f2, 0(t0)
    la t0, _reg_f3
    fld  f3, 0(t0)
    la t0, _reg_f4
    fld  f4, 0(t0)
    la t0, _reg_f5
    fld  f5, 0(t0)
    la t0, _reg_f6
    fld  f6, 0(t0)
    la t0, _reg_f7
    fld  f7, 0(t0)
    la t0, _reg_f8
    fld  f8, 0(t0)
    la t0, _reg_f9
    fld  f9, 0(t0)
    la t0, _reg_f10
    fld  f10, 0(t0)
    la t0, _reg_f11
    fld  f11, 0(t0)
    la t0, _reg_f12
    fld  f12, 0(t0)
    la t0, _reg_f13
    fld  f13, 0(t0)
    la t0, _reg_f14
    fld  f14, 0(t0)
    la t0, _reg_f15
    fld  f15, 0(t0)
    la t0, _reg_f16
    fld  f16, 0(t0)
    la t0, _reg_f17
    fld  f17, 0(t0)
    la t0, _reg_f18
    fld  f18, 0(t0)
    la t0, _reg_f19
    fld  f19, 0(t0)
    la t0, _reg_f20
    fld  f20, 0(t0)
    la t0, _reg_f21
    fld  f21, 0(t0)
    la t0, _reg_f22
    fld  f22, 0(t0)
    la t0, _reg_f23
    fld  f23, 0(t0)
    la t0, _reg_f24
    fld  f24, 0(t0)
    la t0, _reg_f25
    fld  f25, 0(t0)
    la t0, _reg_f26
    fld  f26, 0(t0)
    la t0, _reg_f27
    fld  f27, 0(t0)
    la t0, _reg_f28
    fld  f28, 0(t0)
    la t0, _reg_f29
    fld  f29, 0(t0)
    la t0, _reg_f30
    fld  f30, 0(t0)
    la t0, _reg_f31
    fld  f31, 0(t0)
    li t0, 0x0
    csrrw zero, fcsr, t0
    // VECTOR STATE DATA
    j _vector_data_end
    .align 4
_reg_v0: .byte 0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_v1: .byte 0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_v2: .byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_v3: .byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_v4: .byte 0xff,0x3f,0xc0,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_v5: .byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_v6: .byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_v7: .byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_v8: .byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_v9: .byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_v10:.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_v11:.byte 0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0d,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_v12:.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_v13:.byte 0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_v14:.byte 0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_v15:.byte 0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_v16:.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_v17:.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_v18:.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_v19:.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_v20:.byte 0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_v21:.byte 0x00,0x00,0x01,0x00,0x02,0x00,0x03,0x00,0x04,0x00,0x05,0x00,0x06,0x00,0x07,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
_reg_v22:.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_v23:.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_v24:.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_v25:.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_v26:.byte 0x9b,0x80,0x9b,0x80,0x9b,0x80,0x9b,0x80,0x9b,0x80,0x9b,0x80,0x9b,0x80,0x9b,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_v27:.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_v28:.byte 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
_reg_v29:.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_v30:.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_reg_v31:.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
_vector_data_end:
    // VECTOR STATE
    vsetvli t0, zero, e8, ta, ma
    la t0, _reg_v0
    vl1r.v v0, (t0)
    la t0, _reg_v1
    vl1r.v v1, (t0)
    la t0, _reg_v2
    vl1r.v v2, (t0)
    la t0, _reg_v3
    vl1r.v v3, (t0)
    la t0, _reg_v4
    vl1r.v v4, (t0)
    la t0, _reg_v5
    vl1r.v v5, (t0)
    la t0, _reg_v6
    vl1r.v v6, (t0)
    la t0, _reg_v7
    vl1r.v v7, (t0)
    la t0, _reg_v8
    vl1r.v v8, (t0)
    la t0, _reg_v9
    vl1r.v v9, (t0)
    la t0, _reg_v10
    vl1r.v v10, (t0)
    la t0, _reg_v11
    vl1r.v v11, (t0)
    la t0, _reg_v12
    vl1r.v v12, (t0)
    la t0, _reg_v13
    vl1r.v v13, (t0)
    la t0, _reg_v14
    vl1r.v v14, (t0)
    la t0, _reg_v15
    vl1r.v v15, (t0)
    la t0, _reg_v16
    vl1r.v v16, (t0)
    la t0, _reg_v17
    vl1r.v v17, (t0)
    la t0, _reg_v18
    vl1r.v v18, (t0)
    la t0, _reg_v19
    vl1r.v v19, (t0)
    la t0, _reg_v20
    vl1r.v v20, (t0)
    la t0, _reg_v21
    vl1r.v v21, (t0)
    la t0, _reg_v22
    vl1r.v v22, (t0)
    la t0, _reg_v23
    vl1r.v v23, (t0)
    la t0, _reg_v24
    vl1r.v v24, (t0)
    la t0, _reg_v25
    vl1r.v v25, (t0)
    la t0, _reg_v26
    vl1r.v v26, (t0)
    la t0, _reg_v27
    vl1r.v v27, (t0)
    la t0, _reg_v28
    vl1r.v v28, (t0)
    la t0, _reg_v29
    vl1r.v v29, (t0)
    la t0, _reg_v30
    vl1r.v v30, (t0)
    la t0, _reg_v31
    vl1r.v v31, (t0)
    li t0, 0x8
    li t1, 0xce
    vsetvl zero, t0, t1
    li t0, 0x0
    csrrw zero, vstart, t0
    li t0, 0x4
    csrrw zero, vcsr, t0
    // STATE
    // restore mstatus
    li t0, 0x6600
    csrc mstatus, t0
    li t0, 0x6600
    csrs mstatus, t0
    // restore registers
    li x1, 0x5080000000000000    // ra
    li x2, 0x30                  // sp
    li x3, 0x0                   // gp
    li x4, 0x0                   // tp
    li x5, 0x22000               // t0
    li x6, 0x1a4c                // t1
    li x7, 0xffffffffe6b19000    // t2
    li x8, 0x0                   // fp
    li x9, 0x1                   // s1
    li x10, 0x2412c              // a0
    li x11, 0x50d4ff94           // a1
    li x12, 0x22285              // a2
    li x13, 0x2                  // a3
    li x14, 0x21da5              // a4
    li x15, 0xce                 // a5
    li x16, 0x2bce0              // a6
    li x17, 0x0                  // a7
    li x18, 0xffffffffffffffff   // s2
    li x19, 0x0                  // s3
    li x20, 0x1                  // s4
    li x21, 0xfffffffffffffce1   // s5
    li x22, 0x0                  // s6
    li x23, 0x2000               // s7
    li x24, 0x1                  // s8
    li x25, 0xfffffffffffc4b88   // s9
    li x26, 0x2000               // s10
    li x27, 0x2540f              // s11
    li x28, 0x2387               // t3
    li x29, 0xfffffffffffc4b89   // t4
    li x30, 0x2280006f           // t5
    li x31, 0x8000               // t6
    // INSTRUCTION
    vfncvt.rtz.xu.f.w v18, v23

_after_last_instr:
# end of test code

    # save context
    csrrw gp, mscratch, gp
    sd x5, 0(gp)
    sd x6, 8(gp)
    sd x7, 16(gp)
    # handle state (load all, modify, store all)
    ld x5, 24(gp)
    ld x6, 32(gp)
    ld x7, 40(gp)
    # update address of last instruction in test
    la   x5, _after_last_instr
    addi x5, x5, -4
    sd x5, 24(gp)
    sd x6, 32(gp)
    sd x7, 40(gp)
    # restore context
    ld x5, 0(gp)
    ld x6, 8(gp)
    ld x7, 16(gp)
    csrrw gp, mscratch, gp
    j _end
